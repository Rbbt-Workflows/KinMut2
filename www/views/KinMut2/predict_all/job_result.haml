- orig_job = job.join
- job = job.join.step(:predict)
- res = orig_job.run
- uni_translations = job.file(:translations).tsv
- mutation_translations = TSV.open(job.step(:translate).file(:mutation_translations))
- translations = job.file(:translations).tsv.reorder "UniProt/SwissProt Accession"
- names = Organism.identifiers(Organism.default_code("Hsa")).index :target => "Associated Gene Name", :fields => ["UniProt/SwissProt Accession"], :persist => true
- iii orig_job.file('interfaces')
- interfaces = orig_job.file('interfaces').tsv
- dbNSFP = orig_job.file('dbNSFP').tsv
- cosmic = orig_job.file('COSMIC').tsv
- cosmic_neighbours = orig_job.file('COSMIC_neighbours').tsv
- appris = orig_job.file('Appris').tsv
- appris_neighbours = orig_job.file('Appris_neighbours').tsv
- uniprot = orig_job.file('UniProt').tsv
- uniprot_neighbours = orig_job.file('UniProt_neighbours').tsv
- predictors = %w(SIFT Polyphen2_HDIV Polyphen2_HVAR MutationTaster MutationAssessor FATHMM LRT VEST3 CADD )
- thresholds = %w( <0.05 >0.957,0.453 >0.909,0.447 >0.5 >3.5,1.9 <-1.5 - >0.8 >3.5   )
- skipped_mutations = job.step(:translate).file(:skipped_mutations).read.split("\n")
- skipped_mutations += (job.step(:translate).load - job.load.keys).collect{|m| mutation_translations[m]}

:ruby

  @uniprot_groups = {}

  res.each{|tmutation,values|
    mutation = values.flatten.first
    uni, change = mutation.split " "
    @uniprot_groups[mutation] = $protein_kinase_groups[uni]
  }

:sass
  .more_files
    display: block !important
  .color.red
    color: red

  .color.green
    color: green

  
  table
    width: 100%
    .ui.message
      width: 100%
    td
      white-space: nowrap
   
  #result
    width: 100%

  th#kg:after
    content: '*'

#result.ui.column.wide
  .ui.breadcrumb
    .section Job:
    .divider
    %a.section.active(href='/#{[workflow, task, orig_job.name]*"/"}')= orig_job.clean_name

  %p 
    :markdown
    
      The following results are the `KinMut-RandomForest` predictions for the
      potential disease implications of each mutation. You can view each in
      more detail by clicking the buttons on each row. 
      
      The results are available for download below the table, as well as the
      correspondence between the input protein identifiers used as input and
      their correspondent UniProt accessions, the features used by the
      algorithm, and it's raw input and output. Additionally we offer some of
      the in-depth annotations also available for bulk download: Appris,
      COSMIC, UniProt, dbNSFP, PPI interfaces, etc

  %hr
  %dl.column_explanations
    %dt KG
    %dd 
      Classification of the human kinome according to Manning et al., 2002

    %dt CV
    %dd 
      Marked pathogenic in ClinVar
    %dt #CS
    %dd 
      Number of COSMIC samples with variants overlapping that same residue. The number of samples with mutations close to the variant is shown in parenthesis
    %dt FL
    %dd 
      Variant overlapping a Firestar ligand binding or catalytic residue. The number of Firestar annotated residues close to the variant is shown in parenthesis
    %dt MR
    %dd 
      Variant overlapping a post-translational modifications (UniProt feature: MOD_RES) annotated residue. The number of such residues close to the variant is shown in parenthesis
    %dt MUT
    %dd
      Variant overlapping a residue experimentally altered by mutagenesis (UniProt feature: MUTAGEN). The number of such resdidues close to the variant is shown in parenthesis
    %dt DT
    %dd 
      The protein is targeted by an FDA approved drug
    %dt PPI
    %dd 
      The variant affects a protein-protein interaction interface
    %dt ODP
    %dd 
      Number of other damage predictors that predict the mutation as damaging: SIFT, Polyphen2_HDIV, Polyphen2_HVAR, MutationTaster, MutationAssessor, FATHMM, VEST3, and CADD
    %dt KM Pred.
    %dd 
      KinMutRF prediction 
    %dt KM Score
    %dd 
      KinMutRF prediction score. The closer to 1 in absolute value the higher the confidence

  - proteins = []
  - tsv = TSV.setup({}, :key_field => "Kinase variant", :fields => ["KG", "CV", "#CS", "FL", "MR", "MUT", "DT", "PPI", "ODP", "KM Pred.",  "KM Score"], :type => :list)
  %table.ui.table.sortable
    %thead
      %tr
        %th Kinase
        %th Variant
        %th#kg KG
        %th CV
        %th #CS
        %th FL
        %th MR
        %th MUT
        %th DT
        %th PPI
        %th ODP
        %th KM Pred.
        %th KM Score
        %th.details
    %tbody
      - orig_job.path.tsv(:type => :list).each do |tmutation, values|
        - mutation = values.shift
        - protein, change = mutation.split " "
        - uni = uni_translations[protein] || protein
        - orig_mutation = mutation_translations[[uni,change]*" "]
        - orig_protein = orig_mutation.split(/[\s,:]/).first
        - proteins << protein
        - prediction, score = values
        - protein_link = ""
        - group = @uniprot_groups[mutation]


        - damage_count = 0
        - total_preds = 0
        - dvalues = dbNSFP[tmutation]
        - if dvalues
          - predictors.each_with_index do |predictor,i|
            - next if predictor == "LRT"
            - raw, dscore, converted, rankscore, raw_rankscore, converted_rankscore, p = nil
            - threshold = thresholds[i]
            - raw = dvalues[predictor + '_raw'] if dvalues.fields.include? predictor + '_raw'
            - dscore = dvalues[predictor + '_score'] if dvalues.fields.include? predictor + '_score'
            - dscore = nil if String === dscore and dscore.empty?
            - dscore = raw if dscore.nil?
            - converted = dvalues[predictor + '_converted_score'] if dvalues.fields.include? predictor + '_converted_score'
            - rankscore = dvalues[predictor + '_rankscore'] if dvalues.fields.include? predictor + '_rankscore'
            - raw_rankscore = dvalues[predictor + '_raw_rankscore'] if dvalues.fields.include? predictor + '_raw_rankscore'
            - converted_rankscore = dvalues[predictor + '_converted_rankscore'] if dvalues.fields.include? predictor + '_converted_rankscore'
            - if score and threshold != '-'
              - p = case threshold
                - when /^<(.*)/
                  - ths = $1.split(",")
                  - ths.inject(0){|acc,e| acc += 1 if dscore.to_f < e.to_f; acc}.to_f/ths.length
                - when /^>(.*)/
                  - ths = $1.split(",")
                  - ths.inject(0){|acc,e| acc += 1 if dscore.to_f > e.to_f; acc}.to_f/ths.length
                - else
                  - nil
              - damage_count += 1 if p > 0.5
              - total_preds +=1

        - values = []

        %tr
          %td
            = orig_protein
            - tsv_key = orig_protein
            - if translations[protein] and translations[protein] != protein
              (#{translations[protein]})
            - elsif names[uni] != orig_protein
              (#{names[uni]})
          %td
            - wt = Kinase.error_in_wt_aa?(protein, change)
            - tsv_key << " " << change
            - if wt.nil? or wt
              - first, *rest = change.split('')
              = "<font color='red'>#{first}</font>#{rest*""}"
              - if wt.nil?
                %span.wt_error== position outside protein range
              - else
                %span.wt_error== (#{wt})
            
            - else
              = change

          - values << group
          %td= group

          %td
            - if $clinvar.include? tmutation and $clinvar[tmutation] == "Pathogenic"
              - values << "Yes"
              Yes
            - else
              - values << "No"
              No

          %td
            - if cosmic.include? tmutation
              - count = cosmic[tmutation]["Sample ID"].length
            - else
              - count = 0
            - if cosmic_neighbours.include? tmutation
              - ncount = cosmic_neighbours[tmutation]["Sample ID"].collect{|l| l.split(";")}.flatten.uniq.length
            - else
              - ncount = 0
            - values << "#{count} (#{ncount})"
            #{count} (#{ncount})

          %td
            - if appris.include? tmutation
              - count = Misc.zip_fields(appris[tmutation]).select{|type,lig| type =~ /firestar/}.length
            - else
              - count = 0
            - if appris_neighbours.include? tmutation
              - ncount = Misc.zip_fields(appris_neighbours[tmutation]).select{|res,type,lig| type =~ /firestar/}.length
            - else
              - ncount = 0
            - values << "#{count == 0 ? "No" : "Yes"} (#{ncount})"
            #{count == 0 ? "No" : "Yes"} (#{ncount})


          %td
            - if uniprot.include? tmutation
              - count = Misc.zip_fields(uniprot[tmutation]).select{|feat,loc,desc| feat =~ /MOD_RES/}.length
            - else
              - count = 0
            - if uniprot_neighbours.include? tmutation
              - ncount = Misc.zip_fields(uniprot_neighbours[tmutation]).select{|res,feat,loc,desc| feat =~ /MOD_RES/}.length
            - else
              - ncount = 0
            - values << "#{count == 0 ? "No" : "Yes"} (#{ncount})"
            #{count == 0 ? "No" : "Yes"} (#{ncount})

          %td
            - if uniprot.include? tmutation
              - count = Misc.zip_fields(uniprot[tmutation]).select{|feat,loc,desc| feat =~ /MUTAGEN/}.length
            - else
              - count = 0
            - if uniprot_neighbours.include? tmutation
              - ncount = Misc.zip_fields(uniprot_neighbours[tmutation]).select{|res,feat,loc,desc| feat =~ /MUTAGEN/}.length
            - else
              - ncount = 0
            - values << "#{count == 0 ? "No" : "Yes"} (#{ncount})"
            #{count == 0 ? "No" : "Yes"} (#{ncount})

          %td
            - name = names[protein]
            - if $kinase_FDA_drugs.select(:Target => name).length > 0
              - values << "Yes"
              Yes
            - else
              - values << "No"
              No

          %td
            - values << interfaces.include?(tmutation) ? "Yes" : "No"
            = interfaces.include?(tmutation) ? "Yes" : "No"

          %td
            - if dbNSFP.include? tmutation
              - values << "#{damage_count} of 8"
              #{damage_count} of 8
            - else
              - values << "NA"
              NA

          %td
            - values << prediction
            - if prediction == "disease"
              %span.ui.small.message.red= prediction
            - else
              %span.ui.small.message.green= prediction || "no prediction"
          %td
            - values << score.to_f * (prediction == "neutral" ? -1 : 1)
            = score.to_f * (prediction == "neutral" ? -1 : 1)


          - details_url = "/details/#{orig_job.name}/#{uni}/#{change}"
          %td.details
            %a.ui.small.button.blue(href=details_url) View details
        - tsv[tsv_key] = values
      

  - if skipped_mutations.length > 0
    .ui.warning.message
      %p
        The following variants have been eliminated because they are not recognized as kinases or because their variation is not 
        missense

        %ul
          - skipped_mutations.each do |mutation|
            %li= mutation

  %p.kinase_groups
    \* 
    %span(style='font-style:italic') Kinase Group:
    Classification of the human kinome according to
    %a(href='http://www.ncbi.nlm.nih.gov/pubmed/12471243' target='_blank') 
      Manning 
      %span(style='font-style:italic')et al.
      , 2002.
    %ul.kinase_groups
      - @uniprot_groups.values.uniq.sort.each do |group|
        %li
          %span(style='font-weight:bold')== #{group}: 
          = $kinase_groups[group]

  -#%a.ui.button.blue(href="#{@ajax_url}?_format=raw")
    Download results (TSV)

  %a.ui.button.blue#dalltable(href="#")
    Download result (TSV)

  %h5 Additional files for download
  %dl
    - files = job.files - ["html", "html.info"]
    - descriptions = Hash.new "Description"
    - descriptions['features'] = "Features used by the wKinMut-2 Random Forest model"
    - descriptions['fixed'] = "Fixed input, translated and filtered for kinase variants"
    - descriptions['translations'] = "Correspondance between provided variants and fixed variants"
    - descriptions['vector.weka.aff'] = "Weka feature vector"
    - descriptions['vector.weka.out'] = "Weka result"
    - descriptions['Appris'] = "Annotation of variants overlapping Appris annotated residues"
    - descriptions['Appris_neighbours'] = "Annotation of variants close to Appris annotated residues"
    - descriptions['COSMIC'] = "Annotation of COSMIC samples with mutations overlapping the variant residue"
    - descriptions['COSMIC_neighbours'] = "Annotation of COSMIC samples with mutations close to the variant residue"
    - descriptions['InterPro'] = "Annotation of variants overlapping InterPro domains"
    - descriptions['InterPro_neighbours'] = "Annotation of variants close to InterPro domains"
    - descriptions['UniProt'] = "Annotation of variants overlapping UniProt annotated residues"
    - descriptions['UniProt_neighbours'] = "Annotation of variants close to UniProt annotated residues"
    - descriptions['dbNSFP'] = "Annotation of variants with dbNSFP (damage predictions)"
    - descriptions['interfaces'] = "Annotation of variants overlapping PPI surfaces"

    - if files.any?
      - files.sort.each do |file|
        - next if file =~ /vector/
        - description = descriptions[file]
        %dt
          %a.ui.button.small(href="/#{[workflow.to_s, job.task.name, job.name, "file", file] * "/"}")= file
        %dd
          = description
    - files = orig_job.files - ["html", "html.info"]
    - if files.any?
      - files.sort.each do |file|
        - description = descriptions[file]
        %dt
          %a.ui.button.small(href="/#{[workflow.to_s, orig_job.task.name, orig_job.name, "file", file] * "/"}")= file
        %dd
          = description


:sass
  .column_explanations
    dt, dd
      display: inline-block
      font-size: 0.8em
      height: 3.5em
      vertical-align: text-top
    dt
      &:after
        content: ": "
      margin-right: 0
      width: 5em
    dd
      margin-left: 0.5em
      margin-right: 1em
      width: calc(50% - 7.5em)
  //.tooltip:not(.active)
    display: none

:deferjs

  var tsv_text = #{tsv.to_s.to_json}

  $('.ui.header#poph').popup({on: 'hover'})

  $('table > thead th').each(function(){
    var th = $(this)
    var name = th.html()
    var dt = $('dl.column_explanations dt').filter(function(i,x){ return x.innerHTML == name }).first()
    if (dt) $(th).attr('title', dt.next().html())
  })

  // add parser through the tablesorter addParser method 
  $.tablesorter.addParser({ 
      // set a unique id 
      id: 'aa_mutation', 
      is: function(s) { 
          // return false so this parser is not auto detected 
          return false; 
      }, 
      format: function(s) { 
          // format your data for normalization 
          return s.toLowerCase().match(/(\d+)/)[0];
      }, 
      // set type, either numeric or text 
      type: 'numeric' 
  }); 
  
  $('#result table.sortable').tablesorter({headers:{ 1: {sorter: 'aa_mutation'}}})

  var download_func = function(){
    var blob = new Blob([tsv_text], {type: "text/tab-separated-values;charset=utf-8"});
    return saveAs(blob, "result.tsv");
  }
   $('#dalltable').click(download_func)
