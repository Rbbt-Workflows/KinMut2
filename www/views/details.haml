
- key = [@protein, @mutation] * " "
- position =  @mutation.scan(/\d+/).first.to_i
- domains = Rbbt.data.UNIPROT[@protein + '.features.txt'].tsv(:merge => true)[position.to_s]
- if domains
  - domains = domains.last 
  
- features = @job.step(:predict_ensp).step(:predict).file('features').tsv
- names = Organism.identifiers(Organism.default_code("Hsa")).index :target => "Associated Gene Name", :fields => ["UniProt/SwissProt Accession"], :persist => true
- name = names[@protein]

:sass
  .tab[data-tab=structure]
    display: block !important
    &:not(.active)
      position: absolute
      top: -2000em
      z-index: -10
      visibility: hidden
  .tabular.ui.menu.top.attached
    width: 100%

.details.full_width.column.full.height
  .ui.breadcrumb
    .section Details:
    .divider
    %a.section(href='/#{["KinMut2", "predict_all", @job.name]*"/"}')= @job.clean_name
    %i.divider.right.chevron.icon
    %a.section.active(href='/#{['details', @job.name, @protein, @mutation]*"/"}')= ["(#{name}) " + @protein , @mutation] * " - "

  .tabular.ui.menu.top.attached
    :deferjs
      $('.tabular .item').tab()
    .item.active(data-tab="protein") General
    .item(data-tab="structure") Structures
    .item(data-tab="structureppi") Structure-PPi
    -#.item(data-tab="db_NSFP") dbNSFP
    .item(data-tab="pathogenicity") Pathogenicity
    .item(data-tab="databases") Databases
    .item(data-tab="literature") Literature
    .item(data-tab="ihop") iHOP
    .item(data-tab="interactions") String 

  .ui.tab.active.bottom.attached.segment(data-tab='protein')
    = partial_render('protein', :protein => @protein)


  .ui.tab.bottom.attached.segment(data-tab='structure')
    = partial_render('structure', :protein => @protein, :position => position, :pdb => nil)

  .ui.tab.bottom.attached.segment(data-tab='structureppi')
    = partial_render('structureppi', :protein => @protein, :position => position, :mutation => @mutation, :job => @job )

  .ui.tab.bottom.attached.segment(data-tab='pathogenicity')
    = partial_render('pathogenicity', :protein => @protein, :position => position, :mutation => @mutation, :features => features[key], :result => @job.step(:predict_ensp).step(:predict).load[key], :domains => domains)

  .ui.tab.bottom.attached.segment(data-tab='databases')
    = fragment do
      - begin
        = partial_render('databases', :protein => @protein, :position => position, :mutation => @mutation)
      - rescue
        -Log.exception $!
        .ui.red.error.message
          Database problem

  .ui.tab.bottom.attached.segment(data-tab='literature')
    = fragment do
      = partial_render('literature', :protein => @protein, :position => position, :mutation => @mutation)

  .ui.tab.bottom.attached.segment(data-tab='ihop')
    = partial_render('ihop', :protein => @protein, :position => position)

  .ui.tab.bottom.attached.segment(data-tab='interactions')
    = fragment do
      = partial_render('interactions', :protein => @protein)
